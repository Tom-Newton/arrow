diff --git a/cpp/src/arrow/filesystem/api.h b/cpp/src/arrow/filesystem/api.h
index 732be5f92..adadf6a51 100644
--- a/cpp/src/arrow/filesystem/api.h
+++ b/cpp/src/arrow/filesystem/api.h
@@ -20,6 +20,9 @@
 #include "arrow/util/config.h"  // IWYU pragma: export

 #include "arrow/filesystem/filesystem.h"  // IWYU pragma: export
+#ifdef ARROW_AZURE
+#include "arrow/filesystem/azurefs.h"  // IWYU pragma: export
+#endif
 #include "arrow/filesystem/hdfs.h"        // IWYU pragma: export
 #ifdef ARROW_GCS
 #include "arrow/filesystem/gcsfs.h"  // IWYU pragma: export
diff --git a/cpp/src/arrow/filesystem/type_fwd.h b/cpp/src/arrow/filesystem/type_fwd.h
index 892f7ad2e..c56baf79f 100644
--- a/cpp/src/arrow/filesystem/type_fwd.h
+++ b/cpp/src/arrow/filesystem/type_fwd.h
@@ -47,6 +47,7 @@ class SlowFileSystem;
 class LocalFileSystem;
 class S3FileSystem;
 class GcsFileSystem;
+class AzureBlobFileSystem;

 }  // namespace fs
 }  // namespace arrow
diff --git a/python/CMakeLists.txt b/python/CMakeLists.txt
index bad5e926a..08840740d 100644
--- a/python/CMakeLists.txt
+++ b/python/CMakeLists.txt
@@ -424,6 +424,10 @@ if(PYARROW_BUILD_S3)
   set(CYTHON_EXTENSIONS ${CYTHON_EXTENSIONS} _s3fs)
 endif()

+if(PYARROW_BUILD_AZURE)
+  set(CYTHON_EXTENSIONS ${CYTHON_EXTENSIONS} _azurefs)
+endif()
+
 if(PYARROW_BUILD_HDFS)
   set(CYTHON_EXTENSIONS ${CYTHON_EXTENSIONS} _hdfs)
 endif()
diff --git a/python/pyarrow/__init__.py b/python/pyarrow/__init__.py
index bcb6b30e7..a02739e00 100644
--- a/python/pyarrow/__init__.py
+++ b/python/pyarrow/__init__.py
@@ -145,7 +145,7 @@ def show_info():
         print(f"  {module: <20}: {status: <8}")

     print("\nFilesystems:")
-    filesystems = ["GcsFileSystem", "HadoopFileSystem", "S3FileSystem"]
+    filesystems = ["GcsFileSystem", "HadoopFileSystem", "S3FileSystem", "AzureBlobFileSystem"]
     for fs in filesystems:
         status = "Enabled" if _filesystem_is_available(fs) else "-"
         print(f"  {fs: <20}: {status: <8}")
diff --git a/python/pyarrow/_azurefs.pyx b/python/pyarrow/_azurefs.pyx
new file mode 100644
index 000000000..0e0f5ff2b
--- /dev/null
+++ b/python/pyarrow/_azurefs.pyx
@@ -0,0 +1,86 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+
+# cython: language_level = 3
+
+from pyarrow.lib cimport (check_status, pyarrow_wrap_metadata,
+                          pyarrow_unwrap_metadata)
+from pyarrow.lib import frombytes, tobytes, KeyValueMetadata, ensure_metadata
+from pyarrow.includes.common cimport *
+from pyarrow.includes.libarrow cimport *
+from pyarrow.includes.libarrow_fs cimport *
+from pyarrow._fs cimport FileSystem, TimePoint_to_ns, PyDateTime_to_TimePoint
+from cython.operator cimport dereference as deref
+
+from datetime import datetime, timedelta, timezone
+
+
+cdef class AzureBlobFileSystem(FileSystem):
+    cdef:
+        CAzureBlobFileSystem* azurefs
+
+    def __init__(self, *, uri=None):
+        cdef:
+            CAzureOptions options
+            shared_ptr[CAzureBlobFileSystem] wrapped
+
+        options = GetResultValue(CAzureOptions.FromUriString(tobytes(uri)))
+
+        with nogil:
+            wrapped = GetResultValue(CAzureBlobFileSystem.Make(options))
+
+        self.init(<shared_ptr[CFileSystem]> wrapped)
+
+    cdef init(self, const shared_ptr[CFileSystem]& wrapped):
+        FileSystem.init(self, wrapped)
+        self.azurefs = <CAzureBlobFileSystem*> wrapped.get()
+
+    @classmethod
+    def _reconstruct(cls, kwargs):
+        return cls(**kwargs)
+
+    def __reduce__(self):
+        cdef CAzureOptions opts = self.azurefs.options()
+        return (
+            AzureBlobFileSystem._reconstruct, (dict(
+                uri=frombytes(opts.account_blob_url),
+            ),))
diff --git a/python/pyarrow/_fs.pyx b/python/pyarrow/_fs.pyx
index 557c08149..6e840dabe 100644
--- a/python/pyarrow/_fs.pyx
+++ b/python/pyarrow/_fs.pyx
@@ -493,6 +493,9 @@ cdef class FileSystem(_Weakrefable):
         elif typ == 'hdfs':
             from pyarrow._hdfs import HadoopFileSystem
             self = HadoopFileSystem.__new__(HadoopFileSystem)
+        elif typ == 'abfs':
+            from pyarrow._azurefs import AzureBlobFileSystem
+            self = AzureBlobFileSystem.__new__(AzureBlobFileSystem)
         elif typ.startswith('py::'):
             self = PyFileSystem.__new__(PyFileSystem)
         else:
diff --git a/python/pyarrow/fs.py b/python/pyarrow/fs.py
index c6f44ccbb..c198e61b8 100644
--- a/python/pyarrow/fs.py
+++ b/python/pyarrow/fs.py
@@ -40,6 +40,11 @@ FileStats = FileInfo

 _not_imported = []

+try:
+    from pyarrow._azurefs import AzureBlobFileSystem  # noqa
+except ImportError:
+    _not_imported.append("AzureBlobFileSystem")
+
 try:
     from pyarrow._hdfs import HadoopFileSystem  # noqa
 except ImportError:
diff --git a/python/pyarrow/includes/libarrow_fs.pxd b/python/pyarrow/includes/libarrow_fs.pxd
index bf22ead83..a56a68816 100644
--- a/python/pyarrow/includes/libarrow_fs.pxd
+++ b/python/pyarrow/includes/libarrow_fs.pxd
@@ -246,6 +246,18 @@ cdef extern from "arrow/filesystem/api.h" namespace "arrow::fs" nogil:
         CResult[shared_ptr[CGcsFileSystem]] Make(const CGcsOptions& options)
         CGcsOptions options()

+    cdef cppclass CAzureOptions "arrow::fs::AzureOptions":
+        c_string account_blob_url
+        c_bool Equals(const CAzureOptions& other)
+
+        @staticmethod
+        CResult[CAzureOptions] FromUriString "FromUri"(const c_string& uri_string)
+
+    cdef cppclass CAzureBlobFileSystem "arrow::fs::AzureBlobFileSystem":
+        @staticmethod
+        CResult[shared_ptr[CAzureBlobFileSystem]] Make(const CAzureOptions& options)
+        CAzureOptions options()
+
     cdef cppclass CHdfsOptions "arrow::fs::HdfsOptions":
         HdfsConnectionConfig connection_config
         int32_t buffer_size
diff --git a/python/setup.py b/python/setup.py
index 2a7e5f7a3..d8b1d565c 100755
--- a/python/setup.py
+++ b/python/setup.py
@@ -115,6 +115,7 @@ class build_ext(_build_ext):
                      ('with-parquet', None, 'build the Parquet extension'),
                      ('with-parquet-encryption', None,
                       'build the Parquet encryption extension'),
+                     ('with-azure', None, 'build the Azure Blob Storage extension'),
                      ('with-gcs', None,
                       'build the Google Cloud Storage (GCS) extension'),
                      ('with-s3', None, 'build the Amazon S3 extension'),
@@ -163,6 +164,8 @@ class build_ext(_build_ext):
             os.environ.get('PYARROW_WITH_GCS', '0'))
         self.with_s3 = strtobool(
             os.environ.get('PYARROW_WITH_S3', '0'))
+        self.with_azure = strtobool(
+            os.environ.get('PYARROW_WITH_AZURE', '0'))
         self.with_hdfs = strtobool(
             os.environ.get('PYARROW_WITH_HDFS', '0'))
         self.with_cuda = strtobool(
@@ -224,6 +227,7 @@ class build_ext(_build_ext):
         '_orc',
         '_plasma',
         '_gcsfs',
+        '_azurefs',
         '_s3fs',
         '_substrait',
         '_hdfs',
@@ -369,6 +373,7 @@ class build_ext(_build_ext):
             append_cmake_bool(self.with_plasma, 'PYARROW_BUILD_PLASMA')
             append_cmake_bool(self.with_gcs, 'PYARROW_BUILD_GCS')
             append_cmake_bool(self.with_s3, 'PYARROW_BUILD_S3')
+            append_cmake_bool(self.with_azure, 'PYARROW_BUILD_AZURE')
             append_cmake_bool(self.with_hdfs, 'PYARROW_BUILD_HDFS')
             append_cmake_bool(self.with_tensorflow, 'PYARROW_USE_TENSORFLOW')
             append_cmake_bool(self.bundle_arrow_cpp,
@@ -557,6 +562,8 @@ class build_ext(_build_ext):
             return True
         if name == '_s3fs' and not self.with_s3:
             return True
+        if name == '_azurefs' and not self.with_azure:
+            return True
         if name == '_hdfs' and not self.with_hdfs:
             return True
         if name == '_dataset' and not self.with_dataset:
